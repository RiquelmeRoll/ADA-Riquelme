#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void addMatrices(int n, int **A, int **B, int **C) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void multiplyMatricesDaC(int n, int **A, int **B, int **C) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }
    
    int newSize = n / 2;
    
    // Asignar memoria para submatrices
    int **A11 = (int **)malloc(newSize * sizeof(int *));
    int **A12 = (int **)malloc(newSize * sizeof(int *));
    int **A21 = (int **)malloc(newSize * sizeof(int *));
    int **A22 = (int **)malloc(newSize * sizeof(int *));
    
    int **B11 = (int **)malloc(newSize * sizeof(int *));
    int **B12 = (int **)malloc(newSize * sizeof(int *));
    int **B21 = (int **)malloc(newSize * sizeof(int *));
    int **B22 = (int **)malloc(newSize * sizeof(int *));
    
    int **C11 = (int **)malloc(newSize * sizeof(int *));
    int **C12 = (int **)malloc(newSize * sizeof(int *));
    int **C21 = (int **)malloc(newSize * sizeof(int *));
    int **C22 = (int **)malloc(newSize * sizeof(int *));
    
    int **P1 = (int **)malloc(newSize * sizeof(int *));
    int **P2 = (int **)malloc(newSize * sizeof(int *));
    int **P3 = (int **)malloc(newSize * sizeof(int *));
    int **P4 = (int **)malloc(newSize * sizeof(int *));
    int **P5 = (int **)malloc(newSize * sizeof(int *));
    int **P6 = (int **)malloc(newSize * sizeof(int *));
    int **P7 = (int **)malloc(newSize * sizeof(int *));
    
    int **tempA = (int **)malloc(newSize * sizeof(int *));
    int **tempB = (int **)malloc(newSize * sizeof(int *));
    
    for (int i = 0; i < newSize; i++) {
        A11[i] = (int *)malloc(newSize * sizeof(int));
        A12[i] = (int *)malloc(newSize * sizeof(int));
        A21[i] = (int *)malloc(newSize * sizeof(int));
        A22[i] = (int *)malloc(newSize * sizeof(int));
        
        B11[i] = (int *)malloc(newSize * sizeof(int));
        B12[i] = (int *)malloc(newSize * sizeof(int));
        B21[i] = (int *)malloc(newSize * sizeof(int));
        B22[i] = (int *)malloc(newSize * sizeof(int));
        
        C11[i] = (int *)malloc(newSize * sizeof(int));
        C12[i] = (int *)malloc(newSize * sizeof(int));
        C21[i] = (int *)malloc(newSize * sizeof(int));
        C22[i] = (int *)malloc(newSize * sizeof(int));
        
        P1[i] = (int *)malloc(newSize * sizeof(int));
        P2[i] = (int *)malloc(newSize * sizeof(int));
        P3[i] = (int *)malloc(newSize * sizeof(int));
        P4[i] = (int *)malloc(newSize * sizeof(int));
        P5[i] = (int *)malloc(newSize * sizeof(int));
        P6[i] = (int *)malloc(newSize * sizeof(int));
        P7[i] = (int *)malloc(newSize * sizeof(int));
        
        tempA[i] = (int *)malloc(newSize * sizeof(int));
        tempB[i] = (int *)malloc(newSize * sizeof(int));
    }
    
    // Dividir matrices en submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];
            
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }
    
    // Calcular productos P1 a P7
    addMatrices(newSize, A11, A22, tempA);
    addMatrices(newSize, B11, B22, tempB);
    multiplyMatricesDaC(newSize, tempA, tempB, P1);
    
    addMatrices(newSize, A21, A22, tempA);
    multiplyMatricesDaC(newSize, tempA, B11, P2);
    
    subtractMatrices(newSize, B12, B22, tempB);
    multiplyMatricesDaC(newSize, A11, tempB, P3);
    
    subtractMatrices(newSize, B21, B11, tempB);
    multiplyMatricesDaC(newSize, A22, tempB, P4);
    
    addMatrices(newSize, A11, A12, tempA);
    multiplyMatricesDaC(newSize, tempA, B22, P5);
    
    subtractMatrices(newSize, A21, A11, tempA);
    addMatrices(newSize, B11, B12, tempB);
    multiplyMatricesDaC(newSize, tempA, tempB, P6);
    
    subtractMatrices(newSize, A12, A22, tempA);
    addMatrices(newSize, B21, B22, tempB);
    multiplyMatricesDaC(newSize, tempA, tempB, P7);
    
    // Calcular submatrices de C
    addMatrices(newSize, P1, P4, tempA);
    subtractMatrices(newSize, tempA, P5, tempB);
    addMatrices(newSize, tempB, P7, C11);
    
    addMatrices(newSize, P3, P5, C12);
    
    addMatrices(newSize, P2, P4, C21);
    
    addMatrices(newSize, P1, P3, tempA);
    subtractMatrices(newSize, tempA, P2, tempB);
    addMatrices(newSize, tempB, P6, C22);
    
    // Combinar submatrices en C
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
    
    // Liberar memoria
    for (int i = 0; i < newSize; i++) {
        free(A11[i]); free(A12[i]); free(A21[i]); free(A22[i]);
        free(B11[i]); free(B12[i]); free(B21[i]); free(B22[i]);
        free(C11[i]); free(C12[i]); free(C21[i]); free(C22[i]);
        free(P1[i]); free(P2[i]); free(P3[i]); free(P4[i]);
        free(P5[i]); free(P6[i]); free(P7[i]);
        free(tempA[i]); free(tempB[i]);
    }
    free(A11); free(A12); free(A21); free(A22);
    free(B11); free(B12); free(B21); free(B22);
    free(C11); free(C12); free(C21); free(C22);
    free(P1); free(P2); free(P3); free(P4); free(P5); free(P6); free(P7);
    free(tempA); free(tempB);
}

int main() {
    int n;
    printf("Ingrese el tama침o de la matriz n: ");
    scanf("%d", &n);
    
    // Asignaci칩n de memoria para las matrices
    int **A = (int **)malloc(n * sizeof(int *));
    int **B = (int **)malloc(n * sizeof(int *));
    int **C = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        A[i] = (int *)malloc(n * sizeof(int));
        B[i] = (int *)malloc(n * sizeof(int));
        C[i] = (int *)malloc(n * sizeof(int));
    }
    
    // Inicializar matrices con valores aleatorios
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }
    
    clock_t start = clock();
    multiplyMatricesDaC(n, A, B, C);
    clock_t end = clock();
    
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecuci칩n (Divide y Vencer치s): %f segundos\n", time_taken);
    
    // Liberar memoria
    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);
    
    return 0;
}
